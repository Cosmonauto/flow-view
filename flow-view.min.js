class FlowViewComponent{constructor({container:container,id:id}){const className=this.constructor.name;container.classList.add(className),Object.defineProperties(this,{boundingClientRect:{get:()=>container.getBoundingClientRect()},container:{value:container},isHighlighted:{get:()=>container.classList.contains(`${className}--highlighted`)},style:{value:window.getComputedStyle(container)}}),"string"==typeof id&&(container.id=id,Object.defineProperty(this,"id",{value:id}))}appendChild(element){return this.container.appendChild(element)}createElement(qualifiedName){return this.appendChild(document.createElement(qualifiedName))}createSvgElement(qualifiedName){return this.appendChild(document.createElementNS("http://www.w3.org/2000/svg",qualifiedName))}dispose(){this.container.remove()}generateId(){return Math.random().toString(36).replace(/[^a-z]+/g,"").substring(0,4)}highlight(enable){const{container:container}=this,className=this.constructor.name;enable?container.classList.add(`${className}--highlighted`):container.classList.remove(`${className}--highlighted`)}}class FlowViewGroup extends FlowViewComponent{constructor({container:container,id:id,position:position={x:0,y:0}}){let x,y;super({container:container,id:id}),Object.defineProperties(this,{position:{get:()=>({x:x,y:y}),set:({x:xx,y:yy})=>{x=xx,y=yy,container.setAttribute("transform",`translate(${x},${y})`)}}}),this.position=position}translate(vector){const{x:x,y:y}=this.position;this.position={x:x+vector.x,y:y+vector.y}}}class FlowViewBox extends FlowViewComponent{constructor({container:container,dimension:dimension,id:id,position:position={x:0,y:0}}){super({container:container,id:id}),Object.defineProperties(this,{dimension:{get:()=>({width:Number(container.getAttribute("width")),height:Number(container.getAttribute("height"))}),set:({width:width,height:height})=>{container.setAttribute("width",width),container.setAttribute("height",height)}},position:{get:()=>({x:Number(container.getAttribute("x")),y:Number(container.getAttribute("y"))}),set:({x:x,y:y})=>{container.setAttribute("x",x),container.setAttribute("y",y)}}}),this.dimension=dimension,this.position=position}}class FlowViewPin extends FlowViewBox{constructor({container:container,dimension:dimension,id:id,index:index,node:node,position:position}){super({container:container,dimension:dimension,id:id,position:position}),Object.defineProperties(this,{index:{value:index},node:{value:node}}),container.addEventListener("mouseenter",()=>this.highlight(!0)),container.addEventListener("mouseleave",()=>this.highlight(!1))}}class FlowViewInput extends FlowViewPin{constructor({container:container,dimension:dimension,inputJson:inputJson,index:index,node:node,position:position}){super({container:container,dimension:dimension,id:inputJson.id,index:index,node:node,position:position});const{canvas:canvas}=node;let link=null;Object.defineProperties(this,{connect:{value:newValue=>{link=newValue,link.to=this.id,link.targetPoint=node.inputCenter(this.index)}},disconnect:{value:()=>{link.to=null,link=null}},link:{get:()=>link},isConnected:{get:()=>null!==link}}),container.addEventListener("mousedown",event=>{if(event.stopPropagation(),this.isConnected)canvas.halfConnectedLink=this.link,this.disconnect(),canvas.dragStart(event);else{const center=this.node.inputCenter(this.index);link=canvas.createLink({to:this.id},{sourcePoint:center}),canvas.halfConnectedLink=link,canvas.dragStart(event)}}),container.addEventListener("mouseup",event=>{event.stopPropagation();const{halfConnectedLink:halfConnectedLink}=canvas;halfConnectedLink&&!halfConnectedLink.hasTarget&&this.connect(halfConnectedLink)})}dispose(){this.isConnected&&this.link.dispose(),super.dispose()}}class FlowViewOutput extends FlowViewPin{constructor({container:container,dimension:dimension,outputJson:outputJson,index:index,node:node,position:position}){super({container:container,dimension:dimension,id:outputJson.id,index:index,node:node,position:position});const{canvas:canvas}=node,links=new Set;Object.defineProperties(this,{connect:{value:newValue=>{newValue.from=this.id,newValue.sourcePoint=node.outputCenter(this.index),links.add(newValue)}},disconnect:{value:oldValue=>{oldValue.from=null,links.remove(oldValue)}},links:{get:()=>links},isConnected:{get:()=>links.size>0}}),container.addEventListener("mousedown",event=>{event.stopPropagation();const center=this.node.outputCenter(this.index),link=canvas.createLink({from:this.id},{targetPoint:center});this.links.add(link),canvas.halfConnectedLink=link,canvas.dragStart(event)}),container.addEventListener("mouseup",event=>{event.stopPropagation();const{halfConnectedLink:halfConnectedLink}=canvas;halfConnectedLink&&!halfConnectedLink.hasSource&&this.connect(halfConnectedLink)})}dispose(){this.isConnected&&this.links.forEach(link=>link.dispose()),super.dispose()}}class FlowViewPinBar extends FlowViewGroup{constructor({container:container,dimension:dimension,id:id,position:position}){super({container:container,id:id,position:position}),Object.defineProperties(this,{rect:{value:new FlowViewBox({container:this.createSvgElement("rect"),dimension:dimension})}})}}class FlowViewLink extends FlowViewComponent{constructor({canvas:canvas,container:container,linkJson:linkJson,sourcePoint:sourcePoint={x:0,y:0},targetPoint:targetPoint={x:0,y:0}}){super({container:container,id:linkJson.id});let x1=sourcePoint.x1,y1=sourcePoint.y1,x2=sourcePoint.x2,y2=sourcePoint.y2,from=linkJson.from,to=linkJson.to;Object.defineProperties(this,{canvas:{value:canvas},from:{get:()=>from,set:newValue=>{from=newValue}},line:{value:this.createSvgElement("line")},hasSource:{get:()=>"string"==typeof from},hasTarget:{get:()=>"string"==typeof to},sourcePoint:{get:()=>sourcePoint,set:({x:x,y:y})=>{x1=x,y1=y,this.line.setAttribute("x1",x1),this.line.setAttribute("y1",y1)}},targetPoint:{get:()=>targetPoint,set:({x:x,y:y})=>{x2=x,y2=y,this.line.setAttribute("x2",x2),this.line.setAttribute("y2",y2)}},to:{get:()=>to,set:newValue=>{to=newValue}}}),this.sourcePoint=sourcePoint,this.targetPoint=targetPoint,container.addEventListener("click",event=>event.stopPropagation()),container.addEventListener("mousedown",event=>{event.stopPropagation(),canvas.selectLink({multiSelection:event.shiftKey,link:this})}),container.addEventListener("mouseup",event=>event.stopPropagation())}dispose(){this.canvas.links.delete(this.id),super.dispose()}}class FlowViewNodeContent extends FlowViewBox{updateContent(){}}class FlowViewNodeText extends FlowViewNodeContent{constructor({container:container,dimension:dimension,position:position,text:text}){super({container:container,dimension:dimension,position:position}),Object.defineProperties(this,{div:{value:new FlowViewComponent({container:this.createElement("div")})}}),this.div.container.innerHTML=text}updateContent(node){this.div.container.innerHTML=node.text}}class FlowViewEditNumPin extends FlowViewComponent{constructor({container:container,setValue:setValue,value:defaultValue}){super({container:container});container.type="number",container.min=0,container.value=defaultValue;container.addEventListener("blur",event=>{(value=>{if(""===value.trim())return void(container.value=defaultValue);const int=Math.round(value);value<0?container.value=defaultValue:(defaultValue=int,setValue(int))})(event.target.value)}),container.addEventListener("keypress",({key:key,target:target})=>{switch(key){case"Enter":container.blur()}})}}class FlowViewNodeTextEditor extends FlowViewComponent{constructor({container:container,submit:submit,value:defaultValue}){super({container:container}),container.type="text",container.value=defaultValue,container.addEventListener("blur",event=>{const text=event.target.value.trim();""!==text&&submit(text)}),container.addEventListener("keypress",({key:key,target:target})=>{switch(key){case"Enter":container.blur()}})}}class FlowViewNodeInspector extends FlowViewComponent{constructor({container:container,node:node}){super({container:container});const textField=new FlowViewComponent({container:this.createElement("div")}),textLabel=textField.createElement("label");textLabel.style.display="block",textLabel.innerHTML="Text",textLabel.for="text";const textInput=new FlowViewNodeTextEditor({container:textField.createElement("input"),submit:text=>{node.text=text},value:node.text}),inputsField=new FlowViewComponent({container:this.createElement("div")});inputsField.createElement("label").innerHTML="Inputs";const inputsEditor=new FlowViewComponent({container:inputsField.createElement("div")}),inputsNumEditor=new FlowViewEditNumPin({container:inputsEditor.createElement("input"),setValue:value=>{const numInputs=node.inputs.size;for(let i=value;i<numInputs;i++)node.deleteInput();for(let i=numInputs;i<value;i++)node.createInput()},value:node.inputs.size}),outputsField=new FlowViewComponent({container:this.createElement("div")});outputsField.createElement("label").innerHTML="Outputs";const outputsEditor=new FlowViewComponent({container:outputsField.createElement("div")}),outputsNumEditor=new FlowViewEditNumPin({container:outputsEditor.createElement("input"),setValue:value=>{const numOutputs=node.outputs.size;for(let i=value;i<numOutputs;i++)node.deleteOutput();for(let i=numOutputs;i<value;i++)node.createOutput()},value:node.outputs.size}),deleteNodeButton=this.createElement("button");deleteNodeButton.innerHTML="Delete",deleteNodeButton.addEventListener("click",event=>{event.preventDefault(),node.dispose(),this.dispose()}),Object.defineProperties(this,{inputsNumEditor:{value:inputsNumEditor},outputsNumEditor:{value:outputsNumEditor},textInput:{value:textInput}})}}class FlowViewNode extends FlowViewGroup{constructor({canvas:canvas,container:container,nodeJson:nodeJson,NodeContentClass:NodeContentClass=FlowViewNodeText,NodeInspectorClass:NodeInspectorClass=FlowViewNodeInspector}){super({container:container,id:nodeJson.id,position:canvas.roundPosition(nodeJson)});const inputBarContainer=this.createSvgElement("g"),contentContainer=this.createSvgElement("foreignObject"),outputBarContainer=this.createSvgElement("g");let inspector=null,text=nodeJson.text;Object.defineProperties(this,{NodeContentClass:{value:NodeContentClass},NodeInspectorClass:{value:NodeInspectorClass}}),Object.defineProperties(this,{attachInspector:{value:canvasInspector=>{const nodeInspector=new NodeInspectorClass({container:canvasInspector.createElement("div"),node:this});inspector=nodeInspector}},canvas:{value:canvas},content:{value:this.spawnContent({canvas:canvas,container:contentContainer,nodeJson:nodeJson})},detachInspector:{value:()=>{inspector.dispose(),inspector=null}},inputs:{value:new Map},inspector:{get:()=>inspector},outputBarPosition:{get:()=>{const{height:height}=this.content.dimension;return{x:0,y:canvas.gridUnit+height}}},outputs:{value:new Map},pinBarDimension:{get:()=>{const{width:width}=this.content.dimension;return{width:width,height:canvas.gridUnit}}}});const pinX=({index:index,width:width,height:height,num:num})=>0===index?0:index*(width-height)/(num-1);Object.defineProperties(this,{inputBar:{value:new FlowViewPinBar({container:inputBarContainer,dimension:this.pinBarDimension})},inputPosition:{value:(index,num=this.inputs.size)=>{const{width:width,height:height}=this.pinBarDimension;return{x:pinX({index:index,width:width,height:height,num:num}),y:0}}},outputBar:{value:new FlowViewPinBar({container:outputBarContainer,dimension:this.pinBarDimension,position:this.outputBarPosition})},outputPosition:{value:(index,num=this.outputs.size)=>{const{width:width,height:height}=this.pinBarDimension;return{x:pinX({index:index,width:width,height:height,num:num}),y:0}}}}),Object.defineProperties(this,{inputCenter:{value:index=>{const{inputPosition:inputPosition,pinBarDimension:pinBarDimension,position:position}=this,half=pinBarDimension.height/2,pinPosition=inputPosition(index);return{x:position.x+pinPosition.x+half,y:position.y+pinPosition.y+half}}},outputCenter:{value:index=>{const{outputBarPosition:outputBarPosition,outputPosition:outputPosition,pinBarDimension:pinBarDimension,position:position}=this,half=pinBarDimension.height/2,pinPosition=outputPosition(index);return{x:position.x+pinPosition.x+half,y:position.y+pinPosition.y+outputBarPosition.y+half}}}}),Object.defineProperties(this,{text:{get:()=>text,set:newValue=>{text=newValue,this.content.updateContent(this.json)}}}),Object.defineProperty(this,"json",{get:()=>{const{id:id,position:{x:x,y:y},text:text}=this;return{id:id,outs:[],ins:[],text:text,x:x,y:y}}}),container.addEventListener("click",event=>{event.stopPropagation(),canvas.dragEnd()}),container.addEventListener("mousedown",event=>{event.stopPropagation(),canvas.selectNode({multiSelection:event.shiftKey,node:this}),canvas.dragStart(event)})}createInput(inputJson={}){const{canvas:{gridUnit:gridUnit},generateId:generateId,inputBar:inputBar,inputPosition:inputPosition,inputs:inputs}=this,numInputs=inputs.size;inputs.forEach(input=>{input.position=inputPosition(input.index,numInputs+1)});const index=numInputs,position=inputPosition(index,numInputs+1),input=new FlowViewInput({container:inputBar.createSvgElement("rect"),dimension:{width:gridUnit,height:gridUnit},index:index,inputJson:{id:generateId(),...inputJson},node:this,position:position});return inputs.set(input.id,input),input}createOutput(outputJson={}){const{canvas:{gridUnit:gridUnit},generateId:generateId,outputBar:outputBar,outputs:outputs,outputPosition:outputPosition}=this,numOutputs=outputs.size;outputs.forEach(output=>{output.position=outputPosition(output.index,numOutputs+1)});const index=numOutputs,position=outputPosition(index,numOutputs+1),output=new FlowViewOutput({container:outputBar.createSvgElement("rect"),dimension:{width:gridUnit,height:gridUnit},index:index,node:this,outputJson:{id:generateId(),...outputJson},position:position});return outputs.set(output.id,output),output}deleteInput(){const{inputs:inputs}=this,index=inputs.size-1;inputs.forEach(input=>{input.index===index&&(inputs.delete(input.id),input.dispose())})}deleteOutput(){const{outputs:outputs}=this,index=outputs.size-1;outputs.forEach(output=>{output.index===index&&(outputs.delete(output.id),output.dispose())})}dispose(){this.inputs.forEach(input=>{input.isConnected&&input.link.dispose()}),this.outputs.forEach(output=>{output.isConnected&&output.links.forEach(link=>link.dispose())}),this.canvas.nodes.delete(this.id),super.dispose()}spawnContent({canvas:canvas,container:container,nodeJson:nodeJson}){const{NodeContentClass:NodeContentClass}=this,{text:text,width:width=0,height:height=0}=nodeJson,textDimension=canvas.roundDimension(canvas.textRuler.sizeOfText(text+"x")),content=new NodeContentClass({container:container,dimension:{width:Math.max(width,textDimension.width),height:Math.max(height,textDimension.height)},nodeJson:nodeJson,position:{x:0,y:canvas.gridUnit}});return content.updateContent(nodeJson),content}}class FlowViewCreator extends FlowViewNode{spawnContent({canvas:canvas,container:container,nodeJson:nodeJson}){const dimension=canvas.roundDimension(canvas.textRuler.sizeOfText("xxxxxxxxxxxxxxxxx")),content=new FlowViewBox({container:container,dimension:dimension,position:{x:0,y:canvas.gridUnit}});return new FlowViewNodeTextEditor({container:content.createElement("input"),submit:text=>{canvas.createNode({text:text,x:nodeJson.x,y:nodeJson.y})},value:""}).container.focus(),content}}class FlowViewTextRuler extends FlowViewComponent{sizeOfText(text){const{container:container}=this;container.textContent=text;const{width:width,height:height}=this.boundingClientRect;return{width:width,height:height}}}class FlowViewInspector extends FlowViewComponent{constructor({container:container}){super({container:container});let inspectedItem=null;Object.defineProperties(this,{hasInspectedItem:{get:()=>null!==inspectedItem},inspectedItem:{get:()=>inspectedItem,set:newValue=>{inspectedItem=newValue}}}),container.addEventListener("click",event=>event.stopPropagation()),container.addEventListener("mousedown",event=>event.stopPropagation())}attach(item){switch(this.hasInspectedItem&&this.inspectedItem.id!==item.id&&this.detach(),!0){case item instanceof FlowViewCreator:break;case item instanceof FlowViewNode:this.inspectedItem=item,item.attachInspector(this)}}detach(){this.hasInspectedItem&&(this.inspectedItem.detachInspector(),this.inspectedItem=null)}}class FlowViewSvgLayer extends FlowViewBox{constructor({container:container,dimension:dimension={width:0,height:0},position:position={x:0,y:0}}){super({container:container,dimension:dimension,position:position});let scale=1;Object.defineProperties(this,{linksLayer:{value:new FlowViewComponent({container:this.createSvgElement("g")})},nodesLayer:{value:new FlowViewComponent({container:this.createSvgElement("g")})},viewBox:{get:()=>Object.assign({},this.position,this.dimension),set:({x:x=this.position.x,y:y=this.position.y,width:width=this.dimension.width,height:height=this.dimension.height,scaleFactor:scaleFactor=1/scale})=>{this.position={x:x,y:y},this.dimension={width:width,height:height},container.setAttribute("viewBox",`${x} ${y} ${Math.floor(scaleFactor*width)} ${Math.floor(scaleFactor*height)}`)}}}),this.viewBox={...position,...dimension},container.addEventListener("wheel",event=>{event.preventDefault();scale+=.001*event.deltaY,scale=Math.min(Math.max(.1,scale),1),this.viewBox={scaleFactor:1/scale}})}translate(vector){const{x:x,y:y}=this.viewBox;this.viewBox={x:x-vector.x,y:y-vector.y}}}class FlowViewCanvas extends FlowViewComponent{constructor(container,{gridUnit:gridUnit=10,CreatorClass:CreatorClass=FlowViewCreator,LinkClass:LinkClass=FlowViewLink,InspectorClass:InspectorClass=FlowViewInspector,NodeClass:NodeClass=FlowViewNode}={}){super({container:container});const inspectorContainer=this.createElement("div"),svgLayerContainer=this.createSvgElement("svg");let currentX,currentY,dragStartedTimeoutId,creator=null,halfConnectedLink=null,isDragging=!1,dragStartedMoving=!1;const inspector=new InspectorClass({container:inspectorContainer}),moveLinksConnectedTo=node=>{node.inputs.forEach(input=>{input.isConnected&&(input.link.targetPoint=node.inputCenter(input.index))}),node.outputs.forEach(output=>{output.isConnected&&output.links.forEach(link=>{link.sourcePoint=node.outputCenter(output.index)})})};Object.defineProperties(this,{closeCreator:{value:()=>{this.hasCreator&&(creator.dispose(),creator=null)}},creator:{get:()=>creator,set:newValue=>{this.closeCreator(),creator=newValue}},CreatorClass:{value:CreatorClass},dragEnd:{value:()=>{const{halfConnectedLink:halfConnectedLink,selectedNodes:selectedNodes}=this;clearTimeout(dragStartedTimeoutId),isDragging=!1,halfConnectedLink?(!1!==halfConnectedLink.hasTarget&&!1!==halfConnectedLink.hasSource||halfConnectedLink.dispose(),this.halfConnectedLink=null):selectedNodes.size>0&&selectedNodes.forEach(node=>{node.position=this.roundPosition(node.position),moveLinksConnectedTo(node)})}},dragMove:{value:({clientX:clientX,clientY:clientY})=>{const{halfConnectedLink:halfConnectedLink,selectedNodes:selectedNodes,svgLayer:svgLayer}=this;if(isDragging){if(!1===dragStartedMoving&&(dragStartedMoving=!0,currentX=clientX,currentY=clientY),halfConnectedLink){const{width:inspectorWidth}=this.inspector.boundingClientRect,{left:canvasLeft,top:canvasTop}=this.boundingClientRect,origin=this.svgLayer.position,x=currentX-inspectorWidth-canvasLeft+origin.x,y=currentY-canvasTop+origin.y;halfConnectedLink.hasTarget&&(halfConnectedLink.sourcePoint={x:x,y:y}),halfConnectedLink.hasSource&&(halfConnectedLink.targetPoint={x:x,y:y})}else selectedNodes.size>0?selectedNodes.forEach(node=>{node.translate({x:clientX-currentX,y:clientY-currentY}),moveLinksConnectedTo(node)}):svgLayer.translate({x:clientX-currentX,y:clientY-currentY});currentX=clientX,currentY=clientY}}},dragStart:{value:()=>{clearTimeout(dragStartedTimeoutId),dragStartedMoving=!1,dragStartedTimeoutId=setTimeout(()=>{dragStartedTimeoutId=null,isDragging=!0},100)}},fontSize:{get:()=>parseInt(this.style.fontSize)},gridUnit:{value:gridUnit},halfConnectedLink:{get:()=>halfConnectedLink,set:newValue=>{halfConnectedLink=newValue}},hasCreator:{get:()=>null!==creator},inputs:{value:new Map},isDragging:{get:()=>isDragging},LinkClass:{value:LinkClass},links:{value:new Map},inspector:{value:inspector},nodes:{value:new Map},outputs:{value:new Map},NodeClass:{value:NodeClass},selectedLinks:{value:new Set},selectedNodes:{value:new Set},svgLayerDimension:{get:()=>{const{width:width,height:height}=this.boundingClientRect;return{width:Math.floor(width-inspector.boundingClientRect.width),height:Math.floor(height)}}},textRuler:{value:new FlowViewTextRuler({container:this.createElement("div")})}}),Object.defineProperties(this,{svgLayer:{value:new FlowViewSvgLayer({container:svgLayerContainer,dimension:this.svgLayerDimension})}}),Object.defineProperties(this,{resizeHandler:{value:()=>{const{width:width,height:height}=this.svgLayerDimension;this.svgLayer.viewBox={width:width,height:height}}}}),window.addEventListener("resize",this.resizeHandler),container.addEventListener("dblclick",event=>{event.stopPropagation();const origin=this.svgLayer.position,{x:x,y:y}=this.svgLayer.boundingClientRect,{clientX:clientX,clientY:clientY}=event;this.spawnCreator({x:clientX-x+origin.x,y:clientY-y+origin.y-gridUnit})}),container.addEventListener("click",event=>{event.stopPropagation(),this.clearSelection(),this.dragEnd(),this.closeCreator(),this.inspector.detach()}),container.addEventListener("mousedown",event=>{event.stopPropagation(),this.clearSelection(),this.dragStart(event)}),container.addEventListener("mouseleave",()=>{isDragging&&this.dragEnd()}),container.addEventListener("mousemove",this.dragMove.bind(this))}clearSelection(){const{selectedNodes:selectedNodes,selectedLinks:selectedLinks}=this;selectedLinks.forEach(link=>link.highlight(!1)),selectedLinks.clear(),selectedNodes.forEach(node=>node.highlight(!1)),selectedNodes.clear()}connect(item){switch(!0){case item instanceof FlowViewLink:return{to:pin=>{switch(!0){case pin instanceof FlowViewInput:case pin instanceof FlowViewOutput:pin.connect(item)}}};case item instanceof FlowViewInput:case item instanceof FlowViewOutput:return{to:link=>{item.connect(link)}};default:console.error("Cannot connect item",item)}}createLink(linkJson={},{LinkClass:LinkClass=this.LinkClass,sourcePoint:sourcePoint,targetPoint:targetPoint}={}){const{from:from,to:to}=linkJson;let input,output;this.nodes.forEach(node=>{from&&node.outputs.has(from)&&(output=node.outputs.get(from)),to&&node.inputs.has(to)&&(input=node.inputs.get(to))});const link=new LinkClass({canvas:this,container:this.svgLayer.linksLayer.createSvgElement("g"),linkJson:{id:this.generateId(),...linkJson},sourcePoint:sourcePoint,targetPoint:targetPoint});return output&&output.connect(link),input&&input.connect(link),this.links.set(link.id,link),link}createNode(nodeJson,{NodeClass:NodeClass=this.NodeClass}={}){this.closeCreator();const node=new NodeClass({canvas:this,container:this.svgLayer.nodesLayer.createSvgElement("g"),nodeJson:{id:this.generateId(),...nodeJson}});return Object.assign([],nodeJson.ins).forEach(pin=>node.createInput(pin)),Object.assign([],nodeJson.outs).forEach(pin=>node.createOutput(pin)),this.nodes.set(node.id,node),node}dispose(){document.removeEventListener("resize",this.resizeHandler)}inspect(item){this.inspector.attach(item)}loadGraph({links:links,nodes:nodes}){nodes.forEach(node=>this.createNode(node)),links.forEach(link=>this.createLink(link))}roundDimension({width:width=0,height:height=0}){const[a,b]=this.roundVector([width,height]);return{width:a,height:b}}roundPosition({x:x=0,y:y=0}){const[a,b]=this.roundVector([x,y]);return{x:a,y:b}}roundVector([a,b]){const{gridUnit:gridUnit}=this,aInt=Math.round(a),bInt=Math.round(b),aIntRest=aInt%gridUnit,bIntRest=bInt%gridUnit;return[aIntRest<=Math.round(gridUnit/2)?aInt-aIntRest:aInt+gridUnit-aIntRest,bIntRest<=Math.round(gridUnit/2)?bInt-bIntRest:bInt+gridUnit-bIntRest]}selectLink({multiSelection:multiSelection,link:link}){const{selectedLinks:selectedLinks}=this;selectedLinks.has(link)||(multiSelection||this.clearSelection(),link.highlight(!0),selectedLinks.add(link))}selectNode({multiSelection:multiSelection,node:node}){const{selectedNodes:selectedNodes}=this;if(selectedNodes.has(node))return;multiSelection||(this.clearSelection(),this.inspect(node)),node.highlight(!0),selectedNodes.add(node);const outputIds=[],links=[];selectedNodes.forEach(node=>{node.inputs.forEach(input=>{input.isConnected&&links.push(input.link)}),node.outputs.forEach(output=>{outputIds.push(output.id)})}),links.forEach(link=>{outputIds.includes(link.from)&&this.selectLink({link:link,multiSelection:multiSelection})})}spawnCreator(position,CreatorClass=this.CreatorClass){this.creator=new CreatorClass({canvas:this,container:this.svgLayer.createSvgElement("g"),nodeJson:position})}}export{FlowViewBox,FlowViewCanvas,FlowViewComponent,FlowViewCreator,FlowViewEditNumPin,FlowViewGroup,FlowViewInput,FlowViewInspector,FlowViewLink,FlowViewNode,FlowViewNodeContent,FlowViewNodeInspector,FlowViewNodeText,FlowViewNodeTextEditor,FlowViewOutput,FlowViewPin,FlowViewPinBar,FlowViewSvgLayer};
